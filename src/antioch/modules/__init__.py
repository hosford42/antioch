# antioch
# Copyright (c) 1999-2011 Phil Christensen
#
#
# See LICENSE for details

"""
Modules add additional client or server functionality
"""

import os, sys

from zope import interface

from twisted import plugin

__path__ = [os.path.abspath(os.path.join(x, 'antioch', 'modules')) for x in sys.path]

__all__ = []

def iterate():
	import antioch.modules
	for module in plugin.getPlugins(IModule, antioch.modules):
		yield module()

def get(name):
	import antioch.modules
	for module in plugin.getPlugins(IModule, antioch.modules):
		if(module.name == name):
			m = module()
			return m
	return None

def discover_commands(mod):
	from antioch.core import transact
	t = mod.__dict__.items()
	return dict(
		[(k,v) for k,v in t if isinstance(v, type) and issubclass(v, transact.WorldTransaction)]
	)

class IModule(interface.Interface):
	name = interface.Attribute('Name of this module.')
	script_url = interface.Attribute('Plugin script URL.')
	
	def get_environment(self):
		"""
		Return a dict of items to add to the verb environment.
		"""
	
	def get_resource(self, user):
		"""
		Return the instantiated resource for this plugin.
		"""
	
	def handle_message(self, msg):
		"""
		Handle a message generated by the verb environment.
		"""
	
	def get_commands(self):
		"""
		Return a dict of WorldTransaction/amp.Command classes provided by this module.
		"""
	
	def activate_client_commands(self, client):
		"""
		Given the athena.LiveElement instance, install the available command support.
		"""