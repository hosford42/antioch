# antioch
# Copyright (c) 1999-2010 Phil Christensen
#
#
# See LICENSE for details

"""
Base package for module configuration discovery.
"""

import os, sys

from zope import interface

from twisted import plugin

__path__ = [os.path.abspath(os.path.join(x, 'antioch', 'modules')) for x in sys.path]

__all__ = []

def iterate():
	import antioch.modules
	for module in plugin.getPlugins(IModule, antioch.modules):
		yield module()

def get(name):
	import antioch.modules
	for module in plugin.getPlugins(IModule, antioch.modules):
		m = module()
		if(m.name == name):
			return m
	return None

class IModule(interface.Interface):
	name = interface.Attribute('Name of this module.')
	
	def get_environment(self, parser):
		"""
		Return a dict of items to add to the verb environment.
		"""
	
	def get_resource(self, user):
		"""
		Return the instantiated resource for this plugin.
		"""
	
	def handle_message(self, msg):
		"""
		Handle a message generated by the verb environment.
		"""
	
	def activate_amp_commands(self, child):
		"""
		Given the AmpChild instance, install the available command support.
		"""